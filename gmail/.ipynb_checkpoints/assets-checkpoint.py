from dagster import define_asset_job, ScheduleDefinition, Definitions, asset, AssetExecutionContext
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
import pandas as pd
import sqlite3
import matplotlib.pyplot as plt
from datetime import datetime
import os


@asset
def get_sales_data():
    """Load sales data from SQLite database"""
    con = sqlite3.connect('D:/FIA1471/e-com.sqlite')
    df = pd.read_sql_query("SELECT * FROM fact_sales;", con)
    con.close()
    df['scraped_timestamp'] = pd.to_datetime(df['scraped_timestamp'])
    return df

@asset(deps=[get_sales_data])
def create_plots():
    """Generate analysis plots"""
    df = get_sales_data()
    plot_files = {}
    
    # Platform distribution
    # Ph√¢n b·ªë n·ªÅn t·∫£ng
    plt.figure(figsize=(10, 7))
    platform_counts = df['platform'].value_counts()
    platform_counts.plot(kind='pie', autopct='%1.1f%%', 
                            colors=['#ff9999','#66b3ff','#99ff99','#ffcc99'],
                            startangle=90, 
                            title="Ph√¢n B·ªë S·∫£n Ph·∫©m Theo N·ªÅn T·∫£ng")
    plt.ylabel('')
    plt.tight_layout()
    plt.savefig('platform_dist.png', dpi=300)
    plt.close()

    # Ph√¢n b·ªë ƒëi·ªÉm ƒë√°nh gi√°
    plt.figure(figsize=(10, 7))
    df['rating'].plot(kind='hist', bins=20, 
                        color='#66b3ff', 
                        edgecolor='black',
                        title="Ph√¢n B·ªë ƒêi·ªÉm ƒê√°nh Gi√° S·∫£n Ph·∫©m")
    plt.xlabel('ƒêi·ªÉm ƒê√°nh Gi√°')
    plt.ylabel('S·ªë L∆∞·ª£ng S·∫£n Ph·∫©m')
    plt.tight_layout()
    plt.savefig('rating_dist.png', dpi=300)
    plt.close()
    plot_files['platform_dist'] = 'platform_dist.png'

    # Ph√¢n ph·ªëi gi√°
    plt.figure(figsize=(10, 7))
    df['salePrice'].plot(kind='hist', bins=30, 
                            color='#99ff99', 
                            edgecolor='black',
                            title="Ph√¢n Ph·ªëi Gi√° S·∫£n Ph·∫©m")
    plt.xlabel('Gi√° S·∫£n Ph·∫©m (VNƒê)')
    plt.ylabel('S·ªë L∆∞·ª£ng S·∫£n Ph·∫©m')
    plt.tight_layout()
    plt.savefig('price_dist.png', dpi=300)
    plt.close()
    plot_files['rating_dist'] = 'rating_dist.png'

    # Price distribution
    plt.figure(figsize=(8, 6))
    df['salePrice'].plot(kind='hist', bins=30, title="Ph√¢n ph·ªëi gi√° s·∫£n ph·∫©m")
    plt.xlabel('Price')
    plt.savefig('price_dist.png')
    plt.close()
    plot_files['price_dist'] = 'price_dist.png'

    # Xu h∆∞·ªõng gi√° theo th·ªùi gian
    plt.figure(figsize=(12, 8))
    trends = df.groupby(['platform', 'scraped_timestamp'])['salePrice'].mean().unstack(0)
    trends.plot(marker='o', linewidth=2, 
                title="Xu H∆∞·ªõng Gi√° Trung B√¨nh Theo N·ªÅn T·∫£ng")
    plt.ylabel('Gi√° Trung B√¨nh (VNƒê)')
    plt.xlabel('Th·ªùi Gian')
    plt.legend(title='N·ªÅn T·∫£ng', loc='best')
    plt.tight_layout()
    plt.savefig('price_trends.png', dpi=300)
    plt.close()
    plot_files['price_trends'] = 'price_trends.png'
    
    return plot_files

@asset(deps=[get_sales_data])
def create_report():
    """Generate HTML report content"""
    df = get_sales_data()
    
    # T√≠nh to√°n c√°c ch·ªâ s·ªë quan tr·ªçng
    total_products = len(df)
    platform_breakdown = df['platform'].value_counts(normalize=True) * 100
    avg_rating = df['rating'].mean()
    median_rating = df['rating'].median()
    avg_price = df['salePrice'].mean()
    median_price = df['salePrice'].median()
    price_range = df['salePrice'].max() - df['salePrice'].min()

    # Ph√¢n t√≠ch chi ti·∫øt
    top_platforms = platform_breakdown.head(3)
    rating_distribution = df['rating'].value_counts(normalize=True).sort_index() * 100

    html_content = f"""
    <html>
        <body style="font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
                     max-width: 800px; 
                     margin: 0 auto; 
                     padding: 20px; 
                     line-height: 1.6; 
                     color: #333;">
            <div style="background-color: #f0f4f8; 
                        padding: 20px; 
                        border-radius: 10px; 
                        text-align: center; 
                        margin-bottom: 20px;">
                <h1 style="color: #1a5f7a; 
                           border-bottom: 3px solid #1a5f7a; 
                           padding-bottom: 10px;">
                    B√ÅO C√ÅO PH√ÇN T√çCH TH∆Ø∆†NG M·∫†I ƒêI·ªÜN T·ª¨
                </h1>
                <p style="font-style: italic; color: #666;">
                    B√°o c√°o chi ti·∫øt v·ªÅ xu h∆∞·ªõng v√† hi·ªáu su·∫•t s·∫£n ph·∫©m
                </p>
            </div>

            <div style="background-color: #e9f5f9; 
                        padding: 15px; 
                        border-radius: 8px; 
                        margin-bottom: 20px;">
                <h2 style="color: #2c3e50;">T·ªïng Quan B√°o C√°o</h2>
                <table style="width: 100%; border-collapse: collapse;">
                    <tr>
                        <td><strong>‚è∞ Th·ªùi Gian B√°o C√°o:</strong></td>
                        <td>{datetime.now().strftime('%d/%m/%Y %H:%M:%S')}</td>
                    </tr>
                    <tr>
                        <td><strong>üî¢ T·ªïng S·∫£n Ph·∫©m:</strong></td>
                        <td>{total_products:,}</td>
                    </tr>
                    <tr>
                        <td><strong>‚≠ê ƒêi·ªÉm ƒê√°nh Gi√° Trung B√¨nh:</strong></td>
                        <td>{avg_rating:.2f}/5.00 (Trung v·ªã: {median_rating:.2f})</td>
                    </tr>
                    <tr>
                        <td><strong>üìä Gi√° S·∫£n Ph·∫©m Trung B√¨nh:</strong></td>
                        <td>{avg_price:,.0f} VNƒê (Trung v·ªã: {median_price:,.0f} VNƒê)</td>
                    </tr>
                </table>
            </div>

            <div style="margin-bottom: 20px;">
                <h2 style="color: #2c3e50;">Ph√¢n T√≠ch Chi Ti·∫øt</h2>
                
                <h3>Ph√¢n B·ªë N·ªÅn T·∫£ng</h3>
                <p>Top 3 n·ªÅn t·∫£ng h√†ng ƒë·∫ßu:</p>
                {''.join([f'<p>‚Ä¢ <strong>{platform}</strong>: {percentage:.2f}%</p>' for platform, percentage in top_platforms.items()])}
                <img src="cid:platform_dist" alt="Ph√¢n B·ªë N·ªÅn T·∫£ng" style="max-width: 100%; height: auto;">
                
                <h3>Ph√¢n B·ªë ƒêi·ªÉm ƒê√°nh Gi√°</h3>
                <p>Chi ti·∫øt ƒëi·ªÉm ƒë√°nh gi√° c·ªßa s·∫£n ph·∫©m:</p>
                {''.join([f'<p>‚Ä¢ <strong>{rating} Sao</strong>: {percentage:.2f}%</p>' for rating, percentage in rating_distribution.items()])}
                <img src="cid:rating_dist" alt="Ph√¢n B·ªë ƒêi·ªÉm ƒê√°nh Gi√°" style="max-width: 100%; height: auto;">
                
                <h3>Ph√¢n Ph·ªëi Gi√°</h3>
                <p>Ph√¢n t√≠ch chi ti·∫øt v·ªÅ gi√° s·∫£n ph·∫©m:</p>
                <p>‚Ä¢ Kho·∫£ng gi√°: {price_range:,.0f} VNƒê</p>
                <img src="cid:price_dist" alt="Ph√¢n Ph·ªëi Gi√°" style="max-width: 100%; height: auto;">
                
                <h3>Xu H∆∞·ªõng Gi√° Theo Th·ªùi Gian</h3>
                <p>Theo d√µi s·ª± bi·∫øn ƒë·ªông gi√° trung b√¨nh tr√™n c√°c n·ªÅn t·∫£ng:</p>
                <img src="cid:price_trends" alt="Xu H∆∞·ªõng Gi√°" style="max-width: 100%; height: auto;">
            </div>

            <div style="background-color: #f0f4f8; 
                        padding: 15px; 
                        border-radius: 8px; 
                        text-align: center;">
                <p style="color: #666; font-style: italic;">
                    B√°o c√°o ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông - ƒê·ªÉ bi·∫øt th√™m chi ti·∫øt, vui l√≤ng li√™n h·ªá b·ªô ph·∫≠n ph√¢n t√≠ch
                </p>
            </div>
        </body>
    </html>
    """
    return html_content

@asset(deps=[create_report, create_plots])
def send_report_email(context: AssetExecutionContext):
    """Send email with report and plots"""
    sender = "aduc21012@gmail.com"
    # Note: Be cautious about hardcoding passwords. Consider using environment variables.
    app_password = "bpsd paie opyf siwr"
    recipient = "aduc21012@gmail.com"

    # Retrieve the report and plots from the previous assets
    report_content = create_report()
    plot_files = create_plots()

    msg = MIMEMultipart('related')
    msg['Subject'] = f'B√°o c√°o ph√¢n t√≠ch b√°n h√†ng - {datetime.now().strftime("%Y-%m-%d")}'
    msg['From'] = sender
    msg['To'] = recipient

    msg.attach(MIMEText(report_content, 'html'))

    # Attach images
    for img_id, img_path in plot_files.items():
        with open(img_path, 'rb') as f:
            img = MIMEBase('application', 'octet-stream')
            img.set_payload(f.read())
            encoders.encode_base64(img)
            img.add_header('Content-Disposition', f'inline; filename={img_path}')
            img.add_header('Content-ID', f'<{img_id}>')
            msg.attach(img)

    # Send email
    try:
        with smtplib.SMTP_SSL('smtp.gmail.com', 465) as server:
            server.login(sender, app_password)
            server.sendmail(sender, recipient, msg.as_string())
        context.log.info("ƒê√£ g·ª≠i email th√†nh c√¥ng!")
    except Exception as e:
        context.log.error(f"L·ªói khi g·ª≠i email: {str(e)}")
        raise


reporting_job = define_asset_job(name="reporting_job", selection=["get_sales_data", "create_plots", "create_report", "send_report_email"])

reporting_schedule = ScheduleDefinition(
    job=reporting_job,
    cron_schedule="* * * * *",  # Runs every minute
    execution_timezone="Asia/Ho_Chi_Minh",
    name="sales_report_schedule"
)